// Code generated by MockGen. DO NOT EDIT.
// Source: shop/internal/db (interfaces: UserDBInterface,ItemDBInterface,TransactionDBInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	models "shop/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockUserDBInterface is a mock of UserDBInterface interface.
type MockUserDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserDBInterfaceMockRecorder
}

// MockUserDBInterfaceMockRecorder is the mock recorder for MockUserDBInterface.
type MockUserDBInterfaceMockRecorder struct {
	mock *MockUserDBInterface
}

// NewMockUserDBInterface creates a new mock instance.
func NewMockUserDBInterface(ctrl *gomock.Controller) *MockUserDBInterface {
	mock := &MockUserDBInterface{ctrl: ctrl}
	mock.recorder = &MockUserDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDBInterface) EXPECT() *MockUserDBInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserDBInterface) CreateUser(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserDBInterfaceMockRecorder) CreateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserDBInterface)(nil).CreateUser), arg0, arg1, arg2)
}

// GetUserByUsername mocks base method.
func (m *MockUserDBInterface) GetUserByUsername(arg0 context.Context, arg1 string) (*models.DBUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(*models.DBUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserDBInterfaceMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserDBInterface)(nil).GetUserByUsername), arg0, arg1)
}

// GetUserIDByUsername mocks base method.
func (m *MockUserDBInterface) GetUserIDByUsername(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByUsername", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByUsername indicates an expected call of GetUserIDByUsername.
func (mr *MockUserDBInterfaceMockRecorder) GetUserIDByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByUsername", reflect.TypeOf((*MockUserDBInterface)(nil).GetUserIDByUsername), arg0, arg1)
}

// GetUserInventory mocks base method.
func (m *MockUserDBInterface) GetUserInventory(arg0 context.Context, arg1 int) ([]models.DBInventoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInventory", arg0, arg1)
	ret0, _ := ret[0].([]models.DBInventoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInventory indicates an expected call of GetUserInventory.
func (mr *MockUserDBInterfaceMockRecorder) GetUserInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInventory", reflect.TypeOf((*MockUserDBInterface)(nil).GetUserInventory), arg0, arg1)
}

// SetInitialCoins mocks base method.
func (m *MockUserDBInterface) SetInitialCoins(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInitialCoins", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInitialCoins indicates an expected call of SetInitialCoins.
func (mr *MockUserDBInterfaceMockRecorder) SetInitialCoins(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInitialCoins", reflect.TypeOf((*MockUserDBInterface)(nil).SetInitialCoins), arg0, arg1, arg2)
}

// UpdateUserCoins mocks base method.
func (m *MockUserDBInterface) UpdateUserCoins(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCoins", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCoins indicates an expected call of UpdateUserCoins.
func (mr *MockUserDBInterfaceMockRecorder) UpdateUserCoins(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCoins", reflect.TypeOf((*MockUserDBInterface)(nil).UpdateUserCoins), arg0, arg1, arg2)
}

// UpdateUserInventory mocks base method.
func (m *MockUserDBInterface) UpdateUserInventory(arg0 context.Context, arg1 int, arg2 string, arg3 int, arg4 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInventory", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInventory indicates an expected call of UpdateUserInventory.
func (mr *MockUserDBInterfaceMockRecorder) UpdateUserInventory(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInventory", reflect.TypeOf((*MockUserDBInterface)(nil).UpdateUserInventory), arg0, arg1, arg2, arg3, arg4)
}

// MockItemDBInterface is a mock of ItemDBInterface interface.
type MockItemDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockItemDBInterfaceMockRecorder
}

// MockItemDBInterfaceMockRecorder is the mock recorder for MockItemDBInterface.
type MockItemDBInterfaceMockRecorder struct {
	mock *MockItemDBInterface
}

// NewMockItemDBInterface creates a new mock instance.
func NewMockItemDBInterface(ctrl *gomock.Controller) *MockItemDBInterface {
	mock := &MockItemDBInterface{ctrl: ctrl}
	mock.recorder = &MockItemDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemDBInterface) EXPECT() *MockItemDBInterfaceMockRecorder {
	return m.recorder
}

// GetItemPrice mocks base method.
func (m *MockItemDBInterface) GetItemPrice(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemPrice", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemPrice indicates an expected call of GetItemPrice.
func (mr *MockItemDBInterfaceMockRecorder) GetItemPrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemPrice", reflect.TypeOf((*MockItemDBInterface)(nil).GetItemPrice), arg0, arg1)
}

// MockTransactionDBInterface is a mock of TransactionDBInterface interface.
type MockTransactionDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionDBInterfaceMockRecorder
}

// MockTransactionDBInterfaceMockRecorder is the mock recorder for MockTransactionDBInterface.
type MockTransactionDBInterfaceMockRecorder struct {
	mock *MockTransactionDBInterface
}

// NewMockTransactionDBInterface creates a new mock instance.
func NewMockTransactionDBInterface(ctrl *gomock.Controller) *MockTransactionDBInterface {
	mock := &MockTransactionDBInterface{ctrl: ctrl}
	mock.recorder = &MockTransactionDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionDBInterface) EXPECT() *MockTransactionDBInterfaceMockRecorder {
	return m.recorder
}

// GetCoinHistory mocks base method.
func (m *MockTransactionDBInterface) GetCoinHistory(arg0 context.Context, arg1 int) (*models.CoinHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinHistory", arg0, arg1)
	ret0, _ := ret[0].(*models.CoinHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinHistory indicates an expected call of GetCoinHistory.
func (mr *MockTransactionDBInterfaceMockRecorder) GetCoinHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinHistory", reflect.TypeOf((*MockTransactionDBInterface)(nil).GetCoinHistory), arg0, arg1)
}

// GetDB mocks base method.
func (m *MockTransactionDBInterface) GetDB() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockTransactionDBInterfaceMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockTransactionDBInterface)(nil).GetDB))
}

// RecordTransaction mocks base method.
func (m *MockTransactionDBInterface) RecordTransaction(arg0 context.Context, arg1, arg2, arg3 int, arg4 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordTransaction", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordTransaction indicates an expected call of RecordTransaction.
func (mr *MockTransactionDBInterfaceMockRecorder) RecordTransaction(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTransaction", reflect.TypeOf((*MockTransactionDBInterface)(nil).RecordTransaction), arg0, arg1, arg2, arg3, arg4)
}
