// Code generated by MockGen. DO NOT EDIT.
// Source: shop/internal/usecase (interfaces: BuyItemUseCaseInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBuyItemUseCaseInterface is a mock of BuyItemUseCaseInterface interface.
type MockBuyItemUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBuyItemUseCaseInterfaceMockRecorder
}

// MockBuyItemUseCaseInterfaceMockRecorder is the mock recorder for MockBuyItemUseCaseInterface.
type MockBuyItemUseCaseInterfaceMockRecorder struct {
	mock *MockBuyItemUseCaseInterface
}

// NewMockBuyItemUseCaseInterface creates a new mock instance.
func NewMockBuyItemUseCaseInterface(ctrl *gomock.Controller) *MockBuyItemUseCaseInterface {
	mock := &MockBuyItemUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockBuyItemUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuyItemUseCaseInterface) EXPECT() *MockBuyItemUseCaseInterfaceMockRecorder {
	return m.recorder
}

// BuyItem mocks base method.
func (m *MockBuyItemUseCaseInterface) BuyItem(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockBuyItemUseCaseInterfaceMockRecorder) BuyItem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockBuyItemUseCaseInterface)(nil).BuyItem), arg0, arg1, arg2)
}
